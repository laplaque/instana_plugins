name: Validate Tag

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Validate tag is newer version
        run: |
          # Get the current tag
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "Current tag: $CURRENT_TAG"
          
          # Remove 'v' prefix for version comparison
          CURRENT_VERSION=${CURRENT_TAG#v}
          
          # Get all previous tags, sort by version, and get the latest
          PREVIOUS_TAGS=$(git tag -l "v*.*.*" | grep -v $CURRENT_TAG || echo "")
          
          if [ -z "$PREVIOUS_TAGS" ]; then
            echo "No previous tags found. This is the first tag."
            exit 0
          fi
          
          PREVIOUS_TAG=$(echo "$PREVIOUS_TAGS" | sort -V | tail -n 1)
          echo "Previous tag: $PREVIOUS_TAG"
          PREVIOUS_VERSION=${PREVIOUS_TAG#v}
          
          # Compare versions
          if [ "$(printf '%s\n' "$PREVIOUS_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" = "$CURRENT_VERSION" ]; then
            if [ "$PREVIOUS_VERSION" = "$CURRENT_VERSION" ]; then
              echo "Error: Current tag ($CURRENT_TAG) is the same as previous tag ($PREVIOUS_TAG)"
            else
              echo "Error: Current tag ($CURRENT_TAG) is lower than previous tag ($PREVIOUS_TAG)"
            fi
            exit 1
          else
            echo "Tag validation passed: $CURRENT_TAG is newer than $PREVIOUS_TAG"
          fi

      - name: Validate tag format
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          
          # Check if tag follows semantic versioning format (vX.Y.Z)
          if ! [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag '$TAG' does not follow the required format 'vX.Y.Z'"
            exit 1
          fi
          
          echo "Tag '$TAG' is valid"
          
      - name: Check tag in version files
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          
          # Check if version exists in sensor files
          SENSOR_FILES=$(find . -name "sensor.py")
          VERSION_FOUND=false
          
          for file in $SENSOR_FILES; do
            if grep -q "VERSION = \"$VERSION\"" "$file"; then
              echo "Found matching version in $file"
              VERSION_FOUND=true
            fi
          done
          
          if [ "$VERSION_FOUND" = false ]; then
            echo "Error: Version $VERSION not found in sensor.py files"
            echo "Please update the VERSION variable in all sensor.py files"
            exit 1
          fi
          
          # Check if version exists in RELEASE_NOTES.md
          if ! grep -q "Version $VERSION" "RELEASE_NOTES.md"; then
            echo "Error: Version $VERSION not found in RELEASE_NOTES.md"
            echo "Please update RELEASE_NOTES.md with the new version"
            exit 1
          fi
