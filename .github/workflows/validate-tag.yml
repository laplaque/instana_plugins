name: Validate Tag

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
      - master

jobs:
  check-workflow-changes:
    runs-on: ubuntu-latest
    outputs:
      workflow_only: ${{ steps.filter.outputs.workflow_only }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Check for workflow-only changes
        id: filter
        run: |
          if [ "${GITHUB_REF#refs/tags/}" != "${GITHUB_REF}" ]; then
            # This is a tag push, we should always validate
            echo "workflow_only=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get the files changed in the most recent commit
          CHANGED_FILES=$(git diff --name-only HEAD HEAD~1 || git diff --name-only $(git rev-parse HEAD))
          
          # Check if all changed files are in .github/actions or .github/workflows
          WORKFLOW_ONLY=true
          for file in $CHANGED_FILES; do
            if [[ ! "$file" =~ ^\.github/(actions|workflows)/ ]]; then
              WORKFLOW_ONLY=false
              break
            fi
          done
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo "workflow_only=$WORKFLOW_ONLY" >> $GITHUB_OUTPUT
          
  validate-tag:
    needs: check-workflow-changes
    if: ${{ needs.check-workflow-changes.outputs.workflow_only != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Wait for tag to propagate
        run: |
          echo "Waiting for 30 seconds to allow tag to be pushed to origin..."
          sleep 30
          
      - name: Check if commit has a tag
        id: check_tag
        run: |
          if [ "${GITHUB_REF#refs/tags/}" = "${GITHUB_REF}" ]; then
            # This is not a tag push
            COMMIT_SHA=$(git rev-parse HEAD)
            TAG=$(git tag --points-at $COMMIT_SHA)
            
            if [ -z "$TAG" ]; then
              echo "Error: Direct push to main/master branch detected without a tag."
              echo "Please create a tag for this commit or use a pull request workflow."
              exit 1
            fi
          fi
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Validate tag is newer version
        run: |
          # Get the current tag
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "Current tag: $CURRENT_TAG"
          
          # Remove 'v' prefix for version comparison
          CURRENT_VERSION=${CURRENT_TAG#v}
          
          # Get all previous tags, sort by version, and get the latest
          PREVIOUS_TAGS=$(git tag -l "v*.*.*" | grep -v $CURRENT_TAG || echo "")
          
          if [ -z "$PREVIOUS_TAGS" ]; then
            echo "No previous tags found. This is the first tag."
            exit 0
          fi
          
          PREVIOUS_TAG=$(echo "$PREVIOUS_TAGS" | sort -V | tail -n 1)
          echo "Previous tag: $PREVIOUS_TAG"
          PREVIOUS_VERSION=${PREVIOUS_TAG#v}
          
          # Compare versions
          if [ "$(printf '%s\n' "$PREVIOUS_VERSION" "$CURRENT_VERSION" | sort -V | head -n1)" = "$CURRENT_VERSION" ]; then
            if [ "$PREVIOUS_VERSION" = "$CURRENT_VERSION" ]; then
              echo "Error: Current tag ($CURRENT_TAG) is the same as previous tag ($PREVIOUS_TAG)"
            else
              echo "Error: Current tag ($CURRENT_TAG) is lower than previous tag ($PREVIOUS_TAG)"
            fi
            exit 1
          else
            echo "Tag validation passed: $CURRENT_TAG is newer than $PREVIOUS_TAG"
          fi

      - name: Validate tag format
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          
          # Check if tag follows semantic versioning format (vX.Y.Z)
          if ! [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag '$TAG' does not follow the required format 'vX.Y.Z'"
            exit 1
          fi
          
          echo "Tag '$TAG' is valid"
          
      - name: Check tag in version files
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          
          # Check if version exists in common/__init__.py (centralized location)
          if ! grep -q "VERSION = \"$VERSION\"" "common/__init__.py"; then
            echo "Error: Version $VERSION not found in common/__init__.py"
            echo "Please update the VERSION variable in common/__init__.py"
            exit 1
          else
            echo "✅ Found matching version in common/__init__.py"
          fi
          
          # Verify the version can be extracted using extract_version.sh
          # This ensures installation scripts will work correctly
          PARENT_DIR="$(pwd)"
          TAG_VERSION="$VERSION"
          source ./common/extract_version.sh
          
          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version extracted from common/__init__.py ($VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          else
            echo "✅ Version extraction script successfully returns the correct version"
          fi
          
          # Check if version exists in RELEASE_NOTES.md
          if ! grep -q "Version $VERSION" "RELEASE_NOTES.md"; then
            echo "Error: Version $VERSION not found in RELEASE_NOTES.md"
            echo "Please update RELEASE_NOTES.md with the new version"
            exit 1
          else
            echo "✅ Found matching version in RELEASE_NOTES.md"
          fi
          
      - name: Notify success
        run: |
          echo "✅ Tag validation successful for ${GITHUB_REF#refs/tags/}"
