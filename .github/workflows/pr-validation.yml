name: PR Validation
on:
  pull_request:
    branches: [main, master]  
    types: [opened, synchronize, reopened]

jobs:
  check-workflow-changes:
    name: Check Workflow Changes
    runs-on: ubuntu-latest
    outputs:
      workflow_only: ${{ steps.filter.outputs.workflow_only }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Check for workflow-only changes
        id: filter
        run: |
          # Get the files changed in this PR
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Check if all changed files are in .github/workflows or .github/actions
          WORKFLOW_ONLY=true
          for file in $CHANGED_FILES; do
            if [[ ! "$file" =~ ^\.github/(workflows|actions)/ ]]; then
              WORKFLOW_ONLY=false
              break
            fi
          done
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo "workflow_only=$WORKFLOW_ONLY" >> $GITHUB_OUTPUT
          
          if [ "$WORKFLOW_ONLY" = "true" ]; then
            echo "‚úÖ Only workflow files changed - skipping TAG validation"
          else
            echo "üìã Code changes detected - TAG validation required"
          fi
          
      - name: Report workflow check status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const { sha } = context.payload.pull_request.head;
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: '${{ job.status }}' === 'success' ? 'Check passed' : 'Check failed',
              context: 'check-workflow-changes'
            });

  validate-pr-ready:
    name: Validate PR Ready for Master
    runs-on: ubuntu-latest
    needs: check-workflow-changes
    if: ${{ needs.check-workflow-changes.outputs.workflow_only != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Need full history to check all existing TAG files
        
      - name: Check TAG file presence and format
        id: check-tag
        run: |
          # Get the version from manifest.toml
          if [ -f "common/manifest.toml" ]; then
            MANIFEST_VERSION=$(grep '^version = ' common/manifest.toml | sed 's/version = "\(.*\)"/\1/')
            echo "üìã Manifest version: v$MANIFEST_VERSION"
          else
            echo "‚ùå PR not ready to merge: Missing common/manifest.toml file"
            exit 1
          fi
          
          # Look for matching TAG file in root directory
          ROOT_TAG_FILE=$(find . -maxdepth 1 -name "TAG_v${MANIFEST_VERSION}.md" | head -n 1)
          
          # Look for matching TAG file in docs/releases directory
          DOCS_TAG_FILE=$(find ./docs/releases -maxdepth 1 -name "TAG_v${MANIFEST_VERSION}.md" | head -n 1)
          
          # Determine which TAG file to use
          if [ -n "$ROOT_TAG_FILE" ]; then
            TAG_FILE="$ROOT_TAG_FILE"
            echo "‚úÖ Found matching TAG file in root: $TAG_FILE"
          elif [ -n "$DOCS_TAG_FILE" ]; then
            TAG_FILE="$DOCS_TAG_FILE"
            echo "‚úÖ Found matching TAG file in docs/releases: $TAG_FILE"
          else
            echo "‚ùå PR not ready to merge: No TAG file found matching manifest version v$MANIFEST_VERSION"
            echo "‚ÑπÔ∏è  Please ensure a TAG_v$MANIFEST_VERSION.md file exists in root or docs/releases"
            exit 1
          fi
          
          # Extract version from filename (should match manifest version)
          TAG_VERSION=$(basename "$TAG_FILE" .md | sed 's/TAG_v//')
          # Set outputs for other steps
          echo "new_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "tag_file=$TAG_FILE" >> $GITHUB_OUTPUT
          
          # Validate version format (major.minor.patch)
          if ! [[ $TAG_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid TAG file format: $TAG_FILE"
            echo "‚ÑπÔ∏è  Expected format: TAG_v{major}.{minor}.{patch}.md (e.g., TAG_v0.1.01.md)"
            exit 1
          fi
          
          echo "‚úÖ TAG file format valid: $TAG_FILE (v$TAG_VERSION)"
          
          # Verify TAG version matches manifest version
          if [ "$TAG_VERSION" != "$MANIFEST_VERSION" ]; then
            echo "‚ùå Version mismatch between TAG file and manifest.toml:"
            echo "   TAG file: $TAG_FILE (v$TAG_VERSION)"
            echo "   manifest.toml: v$MANIFEST_VERSION"
            exit 1
          fi
          
          echo "‚úÖ TAG version matches manifest.toml version: v$TAG_VERSION"

      - name: Validate version increment
        run: |
          NEW_VERSION="${{ steps.check-tag.outputs.new_version }}"
          echo "üîç Checking version increment for: v$NEW_VERSION"
          
          # Get the base branch (target of the PR)
          BASE_BRANCH="${{ github.base_ref }}"
          echo "üìã Base branch: $BASE_BRANCH"
          
          # Fetch the base branch
          git fetch origin $BASE_BRANCH
          
          # Get the manifest version from the base branch if available
          BASE_VERSION=""
          if git ls-tree -r origin/$BASE_BRANCH --name-only | grep -q "^common/manifest.toml$"; then
            # Extract version from manifest.toml in base branch
            BASE_MANIFEST_CONTENT=$(git show origin/$BASE_BRANCH:common/manifest.toml)
            BASE_VERSION=$(echo "$BASE_MANIFEST_CONTENT" | grep '^version = ' | sed 's/version = "\(.*\)"/\1/')
            echo "üìä Base manifest version: v$BASE_VERSION"
          fi
          
          # If no manifest version found, try to find highest TAG file version
          if [ -z "$BASE_VERSION" ]; then
            echo "‚ö†Ô∏è No manifest.toml found in $BASE_BRANCH, looking for TAG files..."
            
            # Find all TAG files in base branch (both root and docs/releases)
            BASE_TAG_FILES=$(git ls-tree -r origin/$BASE_BRANCH --name-only | grep -E "^(TAG_v.*\.md|docs/releases/TAG_v.*\.md)$" || echo "")
            
            # Use sort and awk to extract highest version number directly
            if [ -n "$BASE_TAG_FILES" ]; then
              # Extract versions, sort them, and get the highest one
              BASE_VERSION=$(echo "$BASE_TAG_FILES" | sed -E 's/^.*TAG_v([0-9]+\.[0-9]+\.[0-9]+)\.md$/\1/' | sort -V | tail -n 1)
              echo "üìä Highest TAG version in $BASE_BRANCH: v$BASE_VERSION"
            fi
          fi
          
          # If still no version found, this is the first release
          if [ -z "$BASE_VERSION" ]; then
            echo "‚úÖ No previous versions found in $BASE_BRANCH. This is the first release: v$NEW_VERSION"
            exit 0
          fi
          
          echo "üÜï New version in PR: v$NEW_VERSION"
          
          # Compare versions using sort -V (version sort)
          if [ "$(printf '%s\n' "$BASE_VERSION" "$NEW_VERSION" | sort -V | head -n1)" = "$NEW_VERSION" ]; then
            if [ "$BASE_VERSION" = "$NEW_VERSION" ]; then
              echo "‚ùå Version conflict: v$NEW_VERSION already exists in $BASE_BRANCH"
              echo "‚ÑπÔ∏è  Please increment to a higher version"
              exit 1
            else
              echo "‚ùå Version downgrade: v$NEW_VERSION is lower than v$BASE_VERSION in $BASE_BRANCH"
              echo "‚ÑπÔ∏è  New version must be higher than the current base version"
              echo "üìã Suggested versions:"
              echo "   - Patch: v$(echo $BASE_VERSION | awk -F. '{print $1"."$2"."($3+1)}')"
              echo "   - Minor: v$(echo $BASE_VERSION | awk -F. '{print $1"."($2+1)".0"}')"  
              echo "   - Major: v$(echo $BASE_VERSION | awk -F. '{print ($1+1)".0.0"}')"
              exit 1
            fi
          else
            echo "‚úÖ Version increment valid: v$BASE_VERSION ‚Üí v$NEW_VERSION"
            
            # Determine increment type
            IFS='.' read -r old_major old_minor old_patch <<< "$BASE_VERSION"
            IFS='.' read -r new_major new_minor new_patch <<< "$NEW_VERSION"
            
            if [ $new_major -gt $old_major ]; then
              echo "üöÄ Major version increment detected"
            elif [ $new_minor -gt $old_minor ]; then
              echo "‚ú® Minor version increment detected" 
            elif [ $new_patch -gt $old_patch ]; then
              echo "üîß Patch version increment detected"
            fi
          fi

      - name: Validate manifest.toml consistency
        run: |
          NEW_VERSION="${{ steps.check-tag.outputs.new_version }}"
          TAG_FILE="${{ steps.check-tag.outputs.tag_file }}"
          
          # Check if manifest.toml version matches TAG file version
          if [ -f "common/manifest.toml" ]; then
            MANIFEST_VERSION=$(grep '^version = ' common/manifest.toml | sed 's/version = "\(.*\)"/\1/')
            
            if [ "$MANIFEST_VERSION" != "$NEW_VERSION" ]; then
              echo "‚ùå Version mismatch between files:"
              echo "   TAG file: $TAG_FILE (v$NEW_VERSION)"
              echo "   manifest.toml: v$MANIFEST_VERSION"
              echo "‚ÑπÔ∏è  Please update common/manifest.toml version to match TAG file"
              exit 1
            else
              echo "‚úÖ manifest.toml version matches: v$MANIFEST_VERSION"
            fi
          else
            echo "‚ö†Ô∏è  Warning: common/manifest.toml not found"
          fi

      - name: Validate RELEASE_NOTES.md consistency
        run: |
          NEW_VERSION="${{ steps.check-tag.outputs.new_version }}"
          TAG_FILE="${{ steps.check-tag.outputs.tag_file }}"
          
          # Check both the root RELEASE_NOTES.md and docs/releases/RELEASE_NOTES.md
          RELEASE_NOTES_FOUND=false
          RELEASE_NOTES_CONTAINS_VERSION=false
          
          # Check root RELEASE_NOTES.md if it exists
          if [ -f "RELEASE_NOTES.md" ]; then
            RELEASE_NOTES_FOUND=true
            if grep -q "Version $NEW_VERSION" "RELEASE_NOTES.md"; then
              RELEASE_NOTES_CONTAINS_VERSION=true
              echo "‚úÖ Root RELEASE_NOTES.md contains: Version $NEW_VERSION"
            fi
          fi
          
          # Check docs/releases/RELEASE_NOTES.md if it exists
          if [ -f "docs/releases/RELEASE_NOTES.md" ]; then
            RELEASE_NOTES_FOUND=true
            if grep -q "Version $NEW_VERSION" "docs/releases/RELEASE_NOTES.md"; then
              RELEASE_NOTES_CONTAINS_VERSION=true
              echo "‚úÖ docs/releases/RELEASE_NOTES.md contains: Version $NEW_VERSION"
            fi
          fi
          
          # Report errors if necessary
          if [ "$RELEASE_NOTES_FOUND" = false ]; then
            echo "‚ö†Ô∏è  Warning: No RELEASE_NOTES.md found in root or docs/releases"
          elif [ "$RELEASE_NOTES_CONTAINS_VERSION" = false ]; then
            echo "‚ùå Version not found in any RELEASE_NOTES.md:"
            echo "   TAG file: $TAG_FILE (v$NEW_VERSION)"
            echo "‚ÑπÔ∏è  Please add 'Version $NEW_VERSION' entry to RELEASE_NOTES.md"
            exit 1
          fi

      - name: PR ready summary
        run: |
          NEW_VERSION="${{ steps.check-tag.outputs.new_version }}"
          TAG_FILE="${{ steps.check-tag.outputs.tag_file }}"
          echo "üéâ PR Validation Passed!"
          echo "‚úÖ TAG file present: $TAG_FILE"
          echo "‚úÖ Version format valid: v$NEW_VERSION"
          echo "‚úÖ Version increment valid"
          echo "‚úÖ File consistency verified"
          echo ""
          echo "üöÄ PR is ready to merge to master!"
          
      - name: Report validation status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const { sha } = context.payload.pull_request.head;
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: '${{ job.status }}' === 'success' ? 'Validation passed' : 'Validation failed',
              context: 'validate-pr-ready'
            });
